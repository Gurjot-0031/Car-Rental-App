plugins {
	id 'org.springframework.boot' version '2.1.8.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
    id 'org.flywaydb.flyway' version "5.2.4" // https://flywaydb.org/documentation/gradle/
}

sourceCompatibility = 11
targetCompatibility = 11


repositories {
    jcenter()
    mavenCentral()
}

if (project.hasProperty('bundle-client')) {
    // Add the client project's output so that it is bundled and served out by spring boot
    sourceSets.main.resources.srcDirs += "$rootDir/client/dist"
}

processResources {
    if (project.hasProperty('prod-build')) {
        // Make sure this isn't accidentally packaged in the final war file.
        exclude('**/application-local.properties')
    }
}

bootWar {
    archiveFileName = "rental-" + project.version.toString() + ".war"
}

configurations {
    generatedCompile
    compile {
        extendsFrom generatedCompile
    }
}

dependencies {
    compile 'mysql:mysql-connector-java:8.0.12'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework:spring-jdbc'
    compile 'com.google.guava:guava:27.0-jre'
    compile 'org.apache.commons:commons-text:1.6'
    compile 'commons-io:commons-io:2.6'
    compile 'org.flywaydb:flyway-core:5.2.4'

    compileOnly 'org.springframework.boot:spring-boot-devtools'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

flyway {
    url = 'jdbc:mysql://localhost/soen6461?useSSL=false&allowPublicKeyRetrieval=true'
    user = 'dbuser'
    password = 'cc1234'
    schemas = ["soen6461"]
    outOfOrder = true
    validateOnMigrate = false
    locations = ["filesystem:${buildFile.parent}/src/main/resources/db/migration"]
}

sourceSets {
    generated {
        java {
            srcDir 'src/generated/java'
        }
    }
    main {
        compileClasspath += sourceSets.generated.output
        runtimeClasspath += sourceSets.generated.output
    }
    test {
        compileClasspath += sourceSets.generated.output
        runtimeClasspath += sourceSets.generated.output
    }
}
